openapi: 3.0.3
info:
  title: Arch Blog API
  description: A modern blog platform backend API
  version: 1.0.0
  contact:
    name: API Support
    email: support@archblog.com

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://api.archblog.com/v1
    description: Production server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from Supabase Auth

  schemas:
    User:
      type: object
      required:
        - id
        - email
        - username
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "user@example.com"
        username:
          type: string
          minLength: 3
          maxLength: 30
          pattern: "^[a-zA-Z0-9_-]+$"
          example: "johndoe"
        displayName:
          type: string
          maxLength: 100
          example: "John Doe"
        bio:
          type: string
          maxLength: 500
          example: "Software developer and blogger"
        avatarUrl:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    NewUserRequest:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
          pattern: "^[a-zA-Z0-9_-]+$"
          example: "johndoe"
          description: "Unique username for the user"
        displayName:
          type: string
          maxLength: 100
          example: "John Doe"
          description: "Display name shown on posts and comments"
        bio:
          type: string
          maxLength: 500
          example: "Software developer and blogger"
          description: "User biography or description"
        avatarUrl:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
          description: "URL to user's avatar image"

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          example: "validation_error"
        message:
          type: string
          example: "Invalid input data"
        details:
          type: object
          additionalProperties: true

    HealthStatus:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        version:
          type: string
          example: "1.0.0"
        checks:
          type: object
          properties:
            database:
              type: string
              enum: [up, down]

    # Pagination schemas for future use
    PaginationMeta:
      type: object
      required:
        - totalItems
        - totalPages
        - currentPage
        - itemsPerPage
      properties:
        totalItems:
          type: integer
          minimum: 0
          example: 100
        totalPages:
          type: integer
          minimum: 0
          example: 10
        currentPage:
          type: integer
          minimum: 1
          example: 1
        itemsPerPage:
          type: integer
          minimum: 1
          maximum: 100
          example: 10

    PaginatedUsers:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    # Authorization schemas
    Permission:
      type: object
      required:
        - id
        - resource
        - action
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        resource:
          type: string
          example: "posts"
          description: "The resource this permission applies to"
        action:
          type: string
          example: "create"
          description: "The action allowed on the resource"
        scope:
          type: string
          example: "own"
          description: "The scope of the permission (own, any, or empty)"
        description:
          type: string
          example: "Create new posts"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    Role:
      type: object
      required:
        - id
        - name
        - description
        - isTemplate
        - isSystem
        - permissions
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "editor"
          description: "Unique name for the role"
        description:
          type: string
          example: "Can create and edit content"
        isTemplate:
          type: boolean
          example: false
          description: "Whether this role is a template for creating other roles"
        isSystem:
          type: boolean
          example: false
          description: "Whether this is a system role that cannot be deleted"
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    CreateRoleRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
          pattern: "^[a-z][a-z0-9_]*$"
          example: "content_editor"
          description: "Unique name for the role (lowercase, alphanumeric and underscore)"
        description:
          type: string
          maxLength: 255
          example: "Can create and edit blog content"
        isTemplate:
          type: boolean
          default: false
          example: false
          description: "Whether this role should be a template"
        permissions:
          type: array
          items:
            type: string
            format: uuid
          description: "List of permission IDs to assign to this role"

    UpdateRoleRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
          pattern: "^[a-z][a-z0-9_]*$"
          example: "content_editor"
        description:
          type: string
          maxLength: 255
          example: "Can create and edit blog content"

    RolePermissionsRequest:
      type: object
      required:
        - permissions
      properties:
        permissions:
          type: array
          items:
            type: string
            format: uuid
          description: "List of permission IDs to assign to the role"

    AssignRoleRequest:
      type: object
      required:
        - roleId
      properties:
        roleId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
          description: "ID of the role to assign"

    UserRole:
      type: object
      required:
        - userId
        - roleId
        - role
        - grantedAt
      properties:
        userId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        roleId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        role:
          $ref: '#/components/schemas/Role'
        grantedBy:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        grantedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    # Posts schemas
    Post:
      type: object
      required:
        - id
        - title
        - content
        - excerpt
        - slug
        - status
        - authorId
        - viewCount
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          minLength: 1
          maxLength: 255
          example: "Introduction to Hexagonal Architecture"
        content:
          type: string
          minLength: 1
          example: "<p>This post explains the principles of hexagonal architecture...</p>"
        excerpt:
          type: string
          maxLength: 500
          example: "A comprehensive guide to understanding hexagonal architecture"
        slug:
          type: string
          pattern: "^[a-z0-9]+(?:-[a-z0-9]+)*$"
          maxLength: 255
          example: "introduction-to-hexagonal-architecture"
        status:
          type: string
          enum: [draft, published, archived]
          example: "published"
        authorId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        viewCount:
          type: integer
          minimum: 0
          example: 1234
        publishedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    PostSummary:
      type: object
      required:
        - id
        - title
        - excerpt
        - slug
        - status
        - authorId
        - viewCount
        - createdAt
        - publishedAt
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "Introduction to Hexagonal Architecture"
        excerpt:
          type: string
          example: "A comprehensive guide to understanding hexagonal architecture"
        slug:
          type: string
          example: "introduction-to-hexagonal-architecture"
        status:
          type: string
          enum: [draft, published, archived]
          example: "published"
        authorId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        viewCount:
          type: integer
          minimum: 0
          example: 1234
        publishedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    CreatePostRequest:
      type: object
      required:
        - title
        - content
        - excerpt
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
          example: "Introduction to Hexagonal Architecture"
        content:
          type: string
          minLength: 1
          example: "<p>This post explains the principles of hexagonal architecture...</p>"
          description: "HTML content of the post (will be sanitized)"
        excerpt:
          type: string
          maxLength: 500
          example: "A comprehensive guide to understanding hexagonal architecture"

    UpdatePostRequest:
      type: object
      required:
        - title
        - content
        - excerpt
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
          example: "Updated: Introduction to Hexagonal Architecture"
        content:
          type: string
          minLength: 1
          example: "<p>This updated post explains...</p>"
        excerpt:
          type: string
          maxLength: 500
          example: "An updated guide to hexagonal architecture"

    PaginatedPosts:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PostSummary'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    # Themes schemas
    Theme:
      type: object
      required:
        - id
        - name
        - description
        - slug
        - curatorId
        - isActive
        - articleCount
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Best Practices in Software Architecture"
        description:
          type: string
          maxLength: 500
          example: "A curated collection of posts about software architecture best practices"
        slug:
          type: string
          pattern: "^[a-z0-9]+(?:-[a-z0-9]+)*$"
          maxLength: 100
          example: "best-practices-software-architecture"
        curatorId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        isActive:
          type: boolean
          example: true
        articleCount:
          type: integer
          minimum: 0
          example: 5
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    ThemeWithArticles:
      allOf:
        - $ref: '#/components/schemas/Theme'
        - type: object
          required:
            - articles
          properties:
            articles:
              type: array
              items:
                $ref: '#/components/schemas/ThemeArticle'

    ThemeArticle:
      type: object
      required:
        - postId
        - position
        - addedBy
        - addedAt
      properties:
        postId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        position:
          type: integer
          minimum: 0
          example: 0
        addedBy:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        addedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    ThemeSummary:
      type: object
      required:
        - id
        - name
        - description
        - slug
        - curatorId
        - isActive
        - articleCount
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Best Practices in Software Architecture"
        description:
          type: string
          example: "A curated collection of posts about software architecture best practices"
        slug:
          type: string
          example: "best-practices-software-architecture"
        curatorId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        isActive:
          type: boolean
          example: true
        articleCount:
          type: integer
          minimum: 0
          example: 5
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    CreateThemeRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Best Practices in Software Architecture"
        description:
          type: string
          maxLength: 500
          example: "A curated collection of posts about software architecture best practices"

    UpdateThemeRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Updated: Best Practices"
        description:
          type: string
          maxLength: 500
          example: "An updated collection of best practices"

    AddArticleRequest:
      type: object
      required:
        - postId
      properties:
        postId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"

    ReorderArticlesRequest:
      type: object
      required:
        - postIds
      properties:
        postIds:
          type: array
          items:
            type: string
            format: uuid
          example: ["123e4567-e89b-12d3-a456-426614174000", "987e6543-e21b-12d3-a456-426614174000"]

    PaginatedThemes:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ThemeSummary'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "unauthorized"
            message: "Missing or invalid authentication token"

    ForbiddenError:
      description: User lacks the required permissions for this operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "forbidden"
            message: "You do not have permission to perform this action"

    NotFoundError:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "not_found"
            message: "Resource not found"

    ValidationError:
      description: The request data is invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "validation_error"
            message: "Invalid input data"
            details:
              username: "Username must be between 3 and 30 characters"

    ConflictError:
      description: The request conflicts with existing data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "conflict"
            message: "Username already exists"

    InternalServerError:
      description: An unexpected error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "internal_server_error"
            message: "An unexpected error occurred"

paths:
  /health/live:
    get:
      tags:
        - System
      summary: Liveness probe
      description: |
        Checks if the application process is alive and responding.
        This is a lightweight check with no external dependencies.
      operationId: getLiveness
      security: []  # No authentication required
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Service is not responding
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /health/ready:
    get:
      tags:
        - System
      summary: Readiness probe
      description: |
        Checks if the application is ready to accept traffic.
        This includes checking database connectivity and other critical dependencies.
      operationId: getReadiness
      security: []  # No authentication required
      responses:
        '200':
          description: Service is ready to accept traffic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Service is not ready to accept traffic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /users:
    post:
      tags:
        - Users
      summary: Create user profile
      description: |
        Creates a new user profile for the authenticated user.
        The email address is extracted from the JWT token to ensure it's verified.
      operationId: createUser
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Returns the profile of the authenticated user
      operationId: getCurrentUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Authorization endpoints
  /permissions:
    get:
      tags:
        - Authorization
      summary: List all permissions
      description: Returns a list of all available permissions in the system
      operationId: listPermissions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of permissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /roles:
    get:
      tags:
        - Authorization
      summary: List all roles
      description: Returns a list of all roles in the system
      operationId: listRoles
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Authorization
      summary: Create a new role
      description: Creates a new role with the specified permissions
      operationId: createRole
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /roles/{id}:
    get:
      tags:
        - Authorization
      summary: Get a role by ID
      description: Returns a single role with its permissions
      operationId: getRole
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the role to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Role retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Authorization
      summary: Update a role
      description: Updates a role's name and description
      operationId: updateRole
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the role to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Authorization
      summary: Delete a role
      description: Deletes a role (cannot delete system roles)
      operationId: deleteRole
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the role to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Role deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /roles/{id}/permissions:
    put:
      tags:
        - Authorization
      summary: Replace role permissions
      description: Replaces all permissions for a role
      operationId: updateRolePermissions
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the role to update permissions for
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePermissionsRequest'
      responses:
        '200':
          description: Role permissions updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}/roles:
    get:
      tags:
        - Authorization
      summary: List user roles
      description: Returns all roles assigned to a user
      operationId: getUserRoles
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRole'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Authorization
      summary: Assign role to user
      description: Assigns a role to a user
      operationId: assignRoleToUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRoleRequest'
      responses:
        '201':
          description: Role assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}/roles/{roleId}:
    delete:
      tags:
        - Authorization
      summary: Revoke role from user
      description: Removes a role from a user
      operationId: revokeRoleFromUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            format: uuid
        - name: roleId
          in: path
          required: true
          description: The ID of the role to revoke
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Role revoked successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Posts endpoints
  /posts:
    get:
      tags:
        - Posts
      summary: List posts
      description: Returns a paginated list of posts
      operationId: listPosts
      security: []  # Public endpoint
      parameters:
        - name: status
          in: query
          description: Filter by post status
          schema:
            type: string
            enum: [draft, published, archived]
        - name: authorId
          in: query
          description: Filter by author ID
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [created_at, updated_at, published_at, title, view_count]
            default: created_at
        - name: sortOrder
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPosts'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Posts
      summary: Create a new post
      description: Creates a new blog post (initially in draft status)
      operationId: createPost
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/{id}:
    get:
      tags:
        - Posts
      summary: Get a post by ID
      description: Returns a single post
      operationId: getPost
      security: []  # Public endpoint
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Posts
      summary: Update a post
      description: Updates an existing post
      operationId: updatePost
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Posts
      summary: Delete a post
      description: Permanently deletes a post
      operationId: deletePost
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Post deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/slug/{slug}:
    get:
      tags:
        - Posts
      summary: Get a post by slug
      description: Returns a single post by its URL slug
      operationId: getPostBySlug
      security: []  # Public endpoint
      parameters:
        - name: slug
          in: path
          required: true
          description: The URL slug of the post
          schema:
            type: string
            pattern: "^[a-z0-9]+(?:-[a-z0-9]+)*$"
      responses:
        '200':
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/{id}/publish:
    post:
      tags:
        - Posts
      summary: Publish a post
      description: Transitions a post from draft to published status
      operationId: publishPost
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to publish
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post published successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/{id}/unpublish:
    post:
      tags:
        - Posts
      summary: Unpublish a post
      description: Transitions a post back to draft status
      operationId: unpublishPost
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to unpublish
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post unpublished successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/{id}/archive:
    post:
      tags:
        - Posts
      summary: Archive a post
      description: Transitions a post to archived status
      operationId: archivePost
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to archive
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post archived successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Themes endpoints
  /themes:
    get:
      tags:
        - Themes
      summary: List themes
      description: Returns a paginated list of themes
      operationId: listThemes
      security: []  # Public endpoint
      parameters:
        - name: isActive
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: curatorId
          in: query
          description: Filter by curator ID
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [created_at, updated_at, name, article_count]
            default: created_at
        - name: sortOrder
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of themes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedThemes'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Themes
      summary: Create a new theme
      description: Creates a new theme for curating posts
      operationId: createTheme
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThemeRequest'
      responses:
        '201':
          description: Theme created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /themes/{id}:
    get:
      tags:
        - Themes
      summary: Get a theme by ID
      description: Returns a single theme without articles
      operationId: getTheme
      security: []  # Public endpoint
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the theme
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Theme retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Themes
      summary: Update a theme
      description: Updates an existing theme's details
      operationId: updateTheme
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the theme to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateThemeRequest'
      responses:
        '200':
          description: Theme updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Themes
      summary: Delete a theme
      description: Permanently deletes a theme and all its article associations
      operationId: deleteTheme
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the theme to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Theme deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /themes/slug/{slug}:
    get:
      tags:
        - Themes
      summary: Get a theme by slug
      description: Returns a single theme by its URL slug
      operationId: getThemeBySlug
      security: []  # Public endpoint
      parameters:
        - name: slug
          in: path
          required: true
          description: The URL slug of the theme
          schema:
            type: string
            pattern: "^[a-z0-9]+(?:-[a-z0-9]+)*$"
      responses:
        '200':
          description: Theme retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /themes/{id}/articles:
    get:
      tags:
        - Themes
      summary: Get theme with articles
      description: Returns a theme with all its articles
      operationId: getThemeWithArticles
      security: []  # Public endpoint
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the theme
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Theme with articles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeWithArticles'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Themes
      summary: Add article to theme
      description: Adds a published post to a theme
      operationId: addArticleToTheme
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the theme
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddArticleRequest'
      responses:
        '201':
          description: Article added successfully
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Themes
      summary: Reorder theme articles
      description: Changes the order of articles in a theme
      operationId: reorderThemeArticles
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the theme
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReorderArticlesRequest'
      responses:
        '200':
          description: Articles reordered successfully
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /themes/{id}/articles/{postId}:
    delete:
      tags:
        - Themes
      summary: Remove article from theme
      description: Removes a post from a theme
      operationId: removeArticleFromTheme
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the theme
          schema:
            type: string
            format: uuid
        - name: postId
          in: path
          required: true
          description: The ID of the post to remove
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Article removed successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /themes/{id}/activate:
    post:
      tags:
        - Themes
      summary: Activate a theme
      description: Makes a theme active and visible
      operationId: activateTheme
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the theme to activate
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Theme activated successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /themes/{id}/deactivate:
    post:
      tags:
        - Themes
      summary: Deactivate a theme
      description: Makes a theme inactive and hidden
      operationId: deactivateTheme
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the theme to deactivate
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Theme deactivated successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

tags:
  - name: System
    description: System health and monitoring
  - name: Users
    description: User management operations
  - name: Authorization
    description: Role and permission management
  - name: Posts
    description: Blog post management
  - name: Themes
    description: Theme and article curation management